


2022.10.29
    문제
    1. AI 캐릭터의 파라미터를 이용한 애니메이션의 변화의 사용에 따른 즉각적인 애니메이션의 변화가 적용되지 않는다.  
    2. 이를 해결하기 위해 애니메이션이 끝이난 후 다음 애니매이션을 적용 시키는 기능을 적용중 유니티가 과부화 되는 문제가 생겼다.

    버그 원인
    1. 공격 애니메이션에 시작은 파라미터로 진행된다.
    2. 파라미터로 진행됨에따라 즉각적인 애니메이션의 변환이 진행되지 않는다.
    3. 유한상태머신을 이용하여 1회성으로 기본공격을 사용한다.
    4. 공격 전 선 딜레이 시간과 애니메이션이 끝날때까지의 딜레이시간을 얻기 위해 코루틴을 사용하였다.
    5. while 문을 이용하여 애니메이션이 끝날때까지의 시간을 대기시킨다.
    6. while 문의 실행 시점에서는 파라미터만 변환 되어있고, 애니메이션은 변경되지 않은 상태이다.
    7. 때문에 애니메이션의 normalizedTime을 이용하여 진행상황이 끝났을때 종료시키려하면 공격 애니메이션이 실행되기 전 애니메이션이
    끝이났을때 조건이 걸려서 종료된다.
    8. and(&&)을 이용하여 애니메이션의 이름을 조건으로 넣게될 시 공격 애니메이션 시작 전 실행되어 while문이 무한 반복에 걸린다.
    9. 코루틴은 Update와는 별개의 진행을 하지만 코루틴 속 while문이 Update에서 애니메이션이 바뀌는동안의 과부하가 걸린다.

    해결 요점
    1. while 문 실행 시 공격 애니메이션이 실행되도록 한다.
    2. while 문이 실행이 되었을때 공격 애니메이션이 아닐경우 무한반복이 걸리지 않게 한다.
     
    해결 방안
    1. while 문 시작 전 약간의 딜레이를 주어 애니메이션이 변경될 시간을 얻는다.
    2. Has Exit Time의 사용
    3. 유한 상태머신에서 Update 부분에서 애니메이션이 끝을 받아온다. [적용]

    적용 리스크
    1. AI 캐릭터의 통합스크립트 이기때문에 애니메이션의 양식이 통일되어야한다.
     

2022.10.31
    리펙토링 진행도 확인
    1. AI 캐릭터의 행동 패턴 및 스킬의 통합 관리 기능 [완성] (행동관련 잔 버그 존재 확인)
    2. 적 캐릭터의 행동 패턴 및 스킬의 통합 관리 기능
    3. 플레이어 스킬의 통합 관리 기능
    3-1. 플레이어 스킬 통합 관리 기능의 스크립트 분리 여부 결정


2022.11.02
    진행 방식 선택
    1. AI 동료 캐릭터는 Partner_Dynamics 스크립트로 AI를 가진다.
    2. 스킬의 관리하여 호출해주는 SkillManager는 AI 캐릭터가 스킬의 사용 시 필요한 정보를 얻기 위해 Partner_Dynamics를 매개변수로 받아와 사용한다.
    3. 기존엔 AI 캐릭터의 스킬만을 호출했기에 Partner_Dynamics에 스킬의 사용에 필효한 데이터를 넣어뒀었다.
    4. 적 유닛과 플레이어 캐릭터의 스킬을 통합하여 관리하기 위해 Partner_Dynamics를 사용하지 않는 캐릭터에게서 정보를 받아올때를 위해 스킬의 사용에 필요한 정보가
    통합된 스크립트가 필요하다.



2022.11.07
    버그 발생과 그에 대한 대응
    1. Unity 내에서 Script가 깨지는 현상이 발생
    2. Can't add script 라는 버그 알림에 대한 해결 방안 모색
    3. 검색과 강사님에게 질의를 통하여 해결방안을 찾아보았으나 해결방안에 대하여 찾지못함

2022.11.08
    버그 발생과 그에 대한 대응
    1. 노트북 사용 이전 데스크탑에서는 동일한 버전에서 현상이 발생하지 않는것을 확인
    2. 최근에 사용하기 시작한 노트북에서만 현상이 발생하는것을 비교 및 확인
    3. 기기 변경에 따른 버그에 대하여 조사 시작

2022.11.09
    버그 발생과 그에 대한 대응
    1. 버그에 대하여 검색 중 에러코드로 인한 원인에 관한 내용 확인
    2. 기기 변경 중 리펙토링 과정으로 인한 에러코드가 다수 존재해 에러코드의 존재가 상당수 존재함을 확인 
    3. 에러코드 제거 후 버그가 발생하지 않음을 확인

    버그의 원인과 증상과 해결법
    1. Unity 사용 중 에러코드를 처리하지 않고 기기 변경시 Can't add script 현상이 발생할 수 있다.  
    2. 에러코드를 전부 처리하면 Scripts 깨짐 현상이 해결된다.

2022.11.10
    2차 캐릭터 스크립트 리펙토링 진행
    1. 플레이어 캐릭터와 AI 캐릭터의 스테이터스를 관리하는 Scripts의 통합하는 과정 중 행동을 담당하는 Scripts에서 알고리즘의 사용 이외엔 공통으로 사용되는 구성이 많음을 확인
    2. 플레이어 캐릭터와 Ai 캐릭터의 행동을 관리하는 Script를 하나로 통합하는 과정을 진행

2022.11.11
    3차 캐릭터 스크립트 리펙토링 진행
    1. 캐릭터의 행동 Scripts를 통합하는 과정 중 Enemy 캐릭터의 행동 Script도 통합의 가능성이 존재함을 확인
    2. 모든 캐릭터의 행동을 FSM을 이용하여 관리하고 행동 알고리즘의 사용여부의 구분을 두어 하나의 Script로 통합 진행

2022.11.14
    진행 목표
    1. 모든 캐릭터의 통합으로인해 캐릭터의 정보를 데이터 베이스에서 호출하여 받아올 필요가 발생
    2. 데이터베이스를 작성하여 캐릭터의 정보를 호출받아 오도록 제작 진행
    3.
    진행 방향
    1. 캐릭터의 데이터 관리에서 0번을 null값으로 두어 플레이어와 다른 캐릭터간에 사용하거나 사용하지 않는 스테이터스를 관리한다.
    (ex : 움직임 알고리즘등은 플래이어가 사용하지 않는다.)
    2.

2022.11.15
    진행목표
    1. Enemy 캐릭터의 행동 Scripts의 캐릭터 행동 Scripts와 통합
    2. 캐릭터의 스킬을 통합 Scripts에 사용가능하도록 최적화 작업
    문제 발생
    1. 통합 Scripts에서 스킬의 사용방식은 상태의 변화에 따른 한번의 호출을 통해 진행된다.
    2. 기존의 스킬 중 돌진의 상태를 취하는 스킬의 경우 한번의 호출로 처리하기가 힘들다.

2022.11.16
    진행목표
    1. Enemy 캐릭터의 행동스크립트 통합 중 캐릭터의 완전한 모듈화가 가능해질것으로 확인
    2. 캐릭터의 완전한 모듈화를 진행하기로 방향성 확립 RPG 게임툴화 진행
    3. SkillManager의 스킬을 모든 캐릭터가 사용가능하도록 코드 진행

2022.11.19
    진행목표
    1. 버프와 디버프 시스템 제작
    2. 고유 스킬 상태 함수 제작
    진행 방향
    1. 버프와 디버프는 코루틴을 사용하여 지속시간 동안 사용되도록 제어가능 (추후 해결과제 : 버프의 해제가 필요할땐 어찌 적용해야 하는가?)
    2. 고유 스킬 상태를 제작하기 위해선 지속시간이 존재하지 않는 OnOff 형식의 버프 함수가 필요
    3. 피격시 고유 스킬 상태일때 체력대신 고유 자원이 감소하는 함수 제작 필요
    4. 피격 함수는 공통 사용이기 때문에 이를 따로 분리하는것이 용이함으로 판단
    5. 피격시 고유 스킬 상태일때를 체크하여 고유 스킬 함수를 이용하는것으로 지향

2022.11.21
    진행목표
    1. IdentityPoint로 피해를 대신 받는 보호막과 같은 기능 필요
    2. 단 IdentityPoint는 다른캐릭터에서는 다른 기능으로 사용될수 있기에 피격 함수에 내용을 넣을 수 없다.(기존엔 피격함수에 존재했다.)
    3. CallBack 함수를 사용해서 사용이 가능하다. 하지만 하려면 피격 함수를 델리게이트를 이용하여 호출하고 상태에 따라 호출되는 함수를 바꾸는 식으로 해야한다. 

2022.11.22
    문제 해결을 위한 전제 조건
    1. 피격을 받았을 시 캐릭터 내의 getDamage() 함수를 사용하여 피격처리를 한다.
    2. getDamage() 함수를 통해 캐릭터의 상태를 HIT(피격) 상태로 바꾼다.
    3. 피격 애니메이션과 피격 딜레이 시간을 가진다.
    4. 방어 상태가 되면 피격시 체력대신 고유 자원이 소모되며, 피격 상태로 바뀌지 않는다.
    5. 모든 캐릭터는 동일한 Status 스크립트를 사용하고 고유 자원은 다른 다른 캐릭터는 보호막으로써 사용하지 않기에 피격판정에서 방어상태를 처리할 수 없다.
    6. 스킬 매니저에서 스킬 함수로서 처리해야한다.
    해결 방안
    1. 피격 함수가 사용됬을 때 감지할 수 있는 기능이 필요하다.
    2. 검색 결과 프로퍼티에 이벤트, 옵저버 패턴, 콜백등을 활용 가능하다.
    3. Unity 기준 delegate, func, action, lamda 등을 활용가능하다.
    4. 위 기능들을 사용하지 않는 방법으로는 기존에 생각해뒀던 GameManager에 변수를 하나 만들어 플레이어 체력의 변화를 감지하는방법이 있다.
    방안 확인
    1. DeleGate를 통한 CallBack을 통해 GetDamage()실행 시키게 한다.
    2. 방어 상태일때는 대리자 함수를 GetDamage()에서 UseIdentity()로 바꾸게 한다.
    3. 매개 변수가 같은 종류 이기에 피해량 만큼 고유 자원이 소모된다.
    부가적 효과
    1. 이를 보호막등 체력대신 다른것을 소모해야할때 적용이 가능하도록 적용가능하다.
    사후 처리 문제
    1. 기능이 꺼졌을때 다시 체력을 소모하는 것으로 바뀌도록 적용하는데에 적용 순서 문제로 롤백이되지 않고있다.
    2. 게임매니저에서 키입력을 통해 종료시키는것으로 기능적으로는 해결되었다.
    남은 구현 기능 확인
    1. 아이템 획득과 아이템 능력치 적용
    2. 아이템 데이터 베이스 제작
    3. 캐릭터의 인벤토리 구현 및 저장 기능 추가
    4. 게임의 진행 방식 조율 및 적용

2022.11.23
    진행목표
    1. 임시 추가보스, 임시 아이템 임시 동료 생성
    2. 아이템 획득 및 인벤토리 추가
    3. 스테이지 이동 및 아이템 착용 적용
    4. 동료 선택창 추가

    순서 정리
    1. 전투 Scene에서 인스턴스 배치를 이용하여 전투 스테이지를 만드려면 스테이지 선택화면의 Scene을 교환해야 한다.
    2. Scene을 전환하기 위해서는 데이터의 저장이 필요하다.
    3. 저장을 할 정보로는 인벤토리와 장착공간, 파티 구성 캐릭터에 대한 정보가 있다.
    4. 저장한 한 값을 이용하기 위해서는 Enemy의 종류를 늘려 게임의 스테이지 수를 늘려야한다.

2022.11.24
    방향성 정리
    1. 포트폴리오 이기에 기능적 측면에 집중한다.
    2. 출시를 위한 것이면 따로 준비한다.

2022.11.26
    기획 변경
    1. RPG적 요소에 조금 더 힘을 실어주는쪽으로 결정
    2. 아이템의 장착과 획득의 방식을 인벤토리를 상시로 킬수있고 목록에서 선별해서 먹는방식에서 드랍된 아이템을 획득하여 얻는방식으로 변경
    3. 게임의 진행을 스테이지방식의 진행에서 방을 넘어가는 방식으로 변경
    4. 캐릭터 선택을 첫 시작시 1회만 변경가능하도록 결정

2022.11.28
    진행목표
    1. 아이템 인벤토리 구현
    2. 아이템의 드래그엔드랍 구현
    3. 장비의 위치 변경 구현
    4. 장착시의 능력치 증가 구현
    (목표 진행 완료)

2022.11.29
    진행목표
    1.과제 제출 문서 완성
    2.캐릭터 변경 방식의 변경 키보드를 이용?
    
2022.12.05
    기획적 문제 발견
    1. 스테이지 맵 이동 방식, 인벤토리 상시 사용 가능, 몬스터 사냥 시 아이템 드랍 전제
    2. 이를 사용 시 플레이어가 먼저 죽고 동료가 클리어 시 스테이지 이동이 불가능
    3. 드랍된 아이템을 이용하기도 불가능
    기획 방향 잡기

2022.12.06
    진행목표
    1. Json을 이용한 Inventory 기능 저장

2022.12.07
    진행 방향
    1. 방사형 스킬의 충돌판정 리펙토링 *****
    2. 아이템 드랍 밑 획득 기능 추가
    3. 아이템 선별 선택 기능 추가
    4. GameManager를 통한 드랍 아이템 정보 저장 밑 이벤트 콜백 기능 추가
    5. 

2022.12.12
    진행 방향
    1. 아이템 드랍 기능 추가
    2. 아이템 선별 선택 기능 추가
    3. 아이템 소모 기능 추가
    아이템 드랍의 진행 방향
    1. SpawnManager를 제작하여 Enemy가 죽을 때 callback 받아 위치에 아이템 드랍 이벤트 실행(List통해 오브젝트를 관리한다.)
    2. GameManager에서 이벤트를 만들어 Enemy가 죽을 때 callback 받아 위치에 아이템 드랍 이벤트 실행(List통해 오브젝트를 관리한다.)
    3. 기존의 CharDynamics를 상속하는 EnemyDynamics Script를 만들어 드랍 시스템을 추가
    
2022.12.14
    추가가능 요소
    1. 잡몹
    2. 상점
    3. 소모형 아이템 (포션,배틀 아이템 등)
    4. 퀘스트
    방향성 - 헌팅 액션 게임
    1. 마을 추가
    2. 강화 시스템
    3. 버프 시스템
    4. 상점
    5. 소모형 아이템
    +a 업적 시스템

2022.12.15
    몬스터 레벨 디자인 계획
    1. 네이비게이션을 이용한 맵 순찰 기능 추가
    2. 몬스터의 이동을 네비게이션을 사용하도록 변환
    3. 몬스터의 공격 시점을 애니메이션에 따른 딜레이 추가

2022.12.16
    진행 목표
    1. 플레이어가 마을에서 퀘스트를 수주해 원하는 몬스터에 도전
    2. 몬스터 헌터와 같은 수렵액션 게임 형식으로 방향 확정
    3. 플레이어의 UI 이벤트 애니메이션이 실행되지 않도록(상태가 변하지 않도록) 변경

2022.12.19
    진행 목표
    1. Unity 네비게이션 기능의 활용과 이해
    2. ClassDiagram 생성 및 네이게이션의 활용 구성안 구상